# Python stubs generated by omniidl from idl/NAO.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "ssr"
#
__name__ = "ssr"
_0_ssr = omniORB.openModule("ssr", r"idl/NAO.idl")
_0_ssr__POA = omniORB.openModule("ssr__POA", r"idl/NAO.idl")


# struct ActuatorPosition
_0_ssr.ActuatorPosition = omniORB.newEmptyClass()
class ActuatorPosition (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ssr/ActuatorPosition:1.0"

    def __init__(self, name, position):
        self.name = name
        self.position = position

_0_ssr.ActuatorPosition = ActuatorPosition
_0_ssr._d_ActuatorPosition  = (omniORB.tcInternal.tv_struct, ActuatorPosition, ActuatorPosition._NP_RepositoryId, "ActuatorPosition", "name", (omniORB.tcInternal.tv_string,0), "position", omniORB.tcInternal.tv_float)
_0_ssr._tc_ActuatorPosition = omniORB.tcInternal.createTypeCode(_0_ssr._d_ActuatorPosition)
omniORB.registerType(ActuatorPosition._NP_RepositoryId, _0_ssr._d_ActuatorPosition, _0_ssr._tc_ActuatorPosition)
del ActuatorPosition

# typedef ... ActuatorPositionSeq
class ActuatorPositionSeq:
    _NP_RepositoryId = "IDL:ssr/ActuatorPositionSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ssr.ActuatorPositionSeq = ActuatorPositionSeq
_0_ssr._d_ActuatorPositionSeq  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ssr/ActuatorPosition:1.0"], 0)
_0_ssr._ad_ActuatorPositionSeq = (omniORB.tcInternal.tv_alias, ActuatorPositionSeq._NP_RepositoryId, "ActuatorPositionSeq", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ssr/ActuatorPosition:1.0"], 0))
_0_ssr._tc_ActuatorPositionSeq = omniORB.tcInternal.createTypeCode(_0_ssr._ad_ActuatorPositionSeq)
omniORB.registerType(ActuatorPositionSeq._NP_RepositoryId, _0_ssr._ad_ActuatorPositionSeq, _0_ssr._tc_ActuatorPositionSeq)
del ActuatorPositionSeq

# struct ActuatorPositionArray
_0_ssr.ActuatorPositionArray = omniORB.newEmptyClass()
class ActuatorPositionArray (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ssr/ActuatorPositionArray:1.0"

    def __init__(self, data, fractionSpeed):
        self.data = data
        self.fractionSpeed = fractionSpeed

_0_ssr.ActuatorPositionArray = ActuatorPositionArray
_0_ssr._d_ActuatorPositionArray  = (omniORB.tcInternal.tv_struct, ActuatorPositionArray, ActuatorPositionArray._NP_RepositoryId, "ActuatorPositionArray", "data", omniORB.typeMapping["IDL:ssr/ActuatorPositionSeq:1.0"], "fractionSpeed", omniORB.tcInternal.tv_float)
_0_ssr._tc_ActuatorPositionArray = omniORB.tcInternal.createTypeCode(_0_ssr._d_ActuatorPositionArray)
omniORB.registerType(ActuatorPositionArray._NP_RepositoryId, _0_ssr._d_ActuatorPositionArray, _0_ssr._tc_ActuatorPositionArray)
del ActuatorPositionArray

# struct StringArray
_0_ssr.StringArray = omniORB.newEmptyClass()
class StringArray (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ssr/StringArray:1.0"

    def __init__(self, data):
        self.data = data

_0_ssr.StringArray = StringArray
_0_ssr._d_StringArray  = (omniORB.tcInternal.tv_struct, StringArray, StringArray._NP_RepositoryId, "StringArray", "data", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0_ssr._tc_StringArray = omniORB.tcInternal.createTypeCode(_0_ssr._d_StringArray)
omniORB.registerType(StringArray._NP_RepositoryId, _0_ssr._d_StringArray, _0_ssr._tc_StringArray)
del StringArray

# struct FloatArray
_0_ssr.FloatArray = omniORB.newEmptyClass()
class FloatArray (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ssr/FloatArray:1.0"

    def __init__(self, data):
        self.data = data

_0_ssr.FloatArray = FloatArray
_0_ssr._d_FloatArray  = (omniORB.tcInternal.tv_struct, FloatArray, FloatArray._NP_RepositoryId, "FloatArray", "data", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0))
_0_ssr._tc_FloatArray = omniORB.tcInternal.createTypeCode(_0_ssr._d_FloatArray)
omniORB.registerType(FloatArray._NP_RepositoryId, _0_ssr._d_FloatArray, _0_ssr._tc_FloatArray)
del FloatArray

# struct BoolArray
_0_ssr.BoolArray = omniORB.newEmptyClass()
class BoolArray (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ssr/BoolArray:1.0"

    def __init__(self, data):
        self.data = data

_0_ssr.BoolArray = BoolArray
_0_ssr._d_BoolArray  = (omniORB.tcInternal.tv_struct, BoolArray, BoolArray._NP_RepositoryId, "BoolArray", "data", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_boolean, 0))
_0_ssr._tc_BoolArray = omniORB.tcInternal.createTypeCode(_0_ssr._d_BoolArray)
omniORB.registerType(BoolArray._NP_RepositoryId, _0_ssr._d_BoolArray, _0_ssr._tc_BoolArray)
del BoolArray

# struct LongArray
_0_ssr.LongArray = omniORB.newEmptyClass()
class LongArray (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ssr/LongArray:1.0"

    def __init__(self, data):
        self.data = data

_0_ssr.LongArray = LongArray
_0_ssr._d_LongArray  = (omniORB.tcInternal.tv_struct, LongArray, LongArray._NP_RepositoryId, "LongArray", "data", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_long, 0))
_0_ssr._tc_LongArray = omniORB.tcInternal.createTypeCode(_0_ssr._d_LongArray)
omniORB.registerType(LongArray._NP_RepositoryId, _0_ssr._d_LongArray, _0_ssr._tc_LongArray)
del LongArray

# interface ALMotion
_0_ssr._d_ALMotion = (omniORB.tcInternal.tv_objref, "IDL:ssr/ALMotion:1.0", "ALMotion")
omniORB.typeMapping["IDL:ssr/ALMotion:1.0"] = _0_ssr._d_ALMotion
_0_ssr.ALMotion = omniORB.newEmptyClass()
class ALMotion :
    _NP_RepositoryId = _0_ssr._d_ALMotion[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ssr.ALMotion = ALMotion
_0_ssr._tc_ALMotion = omniORB.tcInternal.createTypeCode(_0_ssr._d_ALMotion)
omniORB.registerType(ALMotion._NP_RepositoryId, _0_ssr._d_ALMotion, _0_ssr._tc_ALMotion)

# ALMotion operations and attributes
ALMotion._d_setAngles = ((omniORB.typeMapping["IDL:ssr/StringArray:1.0"], omniORB.typeMapping["IDL:ssr/FloatArray:1.0"], omniORB.tcInternal.tv_float), (), None)
ALMotion._d_getAngles = ((omniORB.typeMapping["IDL:ssr/StringArray:1.0"], omniORB.tcInternal.tv_boolean), (omniORB.typeMapping["IDL:ssr/FloatArray:1.0"], ), None)
ALMotion._d_openHand = (((omniORB.tcInternal.tv_string,0), ), (), None)
ALMotion._d_closeHand = (((omniORB.tcInternal.tv_string,0), ), (), None)
ALMotion._d_setStiffness = ((omniORB.typeMapping["IDL:ssr/StringArray:1.0"], omniORB.typeMapping["IDL:ssr/FloatArray:1.0"]), (), None)
ALMotion._d_getStiffness = ((omniORB.typeMapping["IDL:ssr/StringArray:1.0"], ), (omniORB.typeMapping["IDL:ssr/FloatArray:1.0"], ), None)
ALMotion._d_rest = ((), (), None)
ALMotion._d_wakeUp = ((), (), None)
ALMotion._d_moveTo = ((omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float), (), None)
ALMotion._d_moveToward = ((omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float), (), None)
ALMotion._d_getRobotPosition = ((), (omniORB.typeMapping["IDL:ssr/FloatArray:1.0"], ), None)
ALMotion._d_getRobotVelocity = ((), (omniORB.typeMapping["IDL:ssr/FloatArray:1.0"], ), None)
ALMotion._d_stopMove = ((), (), None)
ALMotion._d_moveIsActive = ((), (omniORB.tcInternal.tv_boolean, ), None)
ALMotion._d_waitUntilMoveIsFinished = ((), (), None)
ALMotion._d_moveInit = ((), (), None)
ALMotion._d_setWalkArmEnabled = ((omniORB.tcInternal.tv_boolean, omniORB.tcInternal.tv_boolean), (), None)
ALMotion._d_getWalkArmEnabled = ((), (omniORB.typeMapping["IDL:ssr/BoolArray:1.0"], ), None)
ALMotion._d_getPosition = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_boolean), (omniORB.typeMapping["IDL:ssr/FloatArray:1.0"], ), None)
ALMotion._d_setPosition = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:ssr/FloatArray:1.0"], omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_long), (), None)
ALMotion._d_setTransform = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:ssr/FloatArray:1.0"], omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_long), (), None)
ALMotion._d_getTransform = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_boolean), (omniORB.typeMapping["IDL:ssr/FloatArray:1.0"], ), None)

# ALMotion object reference
class _objref_ALMotion (CORBA.Object):
    _NP_RepositoryId = ALMotion._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def setAngles(self, *args):
        return self._obj.invoke("setAngles", _0_ssr.ALMotion._d_setAngles, args)

    def getAngles(self, *args):
        return self._obj.invoke("getAngles", _0_ssr.ALMotion._d_getAngles, args)

    def openHand(self, *args):
        return self._obj.invoke("openHand", _0_ssr.ALMotion._d_openHand, args)

    def closeHand(self, *args):
        return self._obj.invoke("closeHand", _0_ssr.ALMotion._d_closeHand, args)

    def setStiffness(self, *args):
        return self._obj.invoke("setStiffness", _0_ssr.ALMotion._d_setStiffness, args)

    def getStiffness(self, *args):
        return self._obj.invoke("getStiffness", _0_ssr.ALMotion._d_getStiffness, args)

    def rest(self, *args):
        return self._obj.invoke("rest", _0_ssr.ALMotion._d_rest, args)

    def wakeUp(self, *args):
        return self._obj.invoke("wakeUp", _0_ssr.ALMotion._d_wakeUp, args)

    def moveTo(self, *args):
        return self._obj.invoke("moveTo", _0_ssr.ALMotion._d_moveTo, args)

    def moveToward(self, *args):
        return self._obj.invoke("moveToward", _0_ssr.ALMotion._d_moveToward, args)

    def getRobotPosition(self, *args):
        return self._obj.invoke("getRobotPosition", _0_ssr.ALMotion._d_getRobotPosition, args)

    def getRobotVelocity(self, *args):
        return self._obj.invoke("getRobotVelocity", _0_ssr.ALMotion._d_getRobotVelocity, args)

    def stopMove(self, *args):
        return self._obj.invoke("stopMove", _0_ssr.ALMotion._d_stopMove, args)

    def moveIsActive(self, *args):
        return self._obj.invoke("moveIsActive", _0_ssr.ALMotion._d_moveIsActive, args)

    def waitUntilMoveIsFinished(self, *args):
        return self._obj.invoke("waitUntilMoveIsFinished", _0_ssr.ALMotion._d_waitUntilMoveIsFinished, args)

    def moveInit(self, *args):
        return self._obj.invoke("moveInit", _0_ssr.ALMotion._d_moveInit, args)

    def setWalkArmEnabled(self, *args):
        return self._obj.invoke("setWalkArmEnabled", _0_ssr.ALMotion._d_setWalkArmEnabled, args)

    def getWalkArmEnabled(self, *args):
        return self._obj.invoke("getWalkArmEnabled", _0_ssr.ALMotion._d_getWalkArmEnabled, args)

    def getPosition(self, *args):
        return self._obj.invoke("getPosition", _0_ssr.ALMotion._d_getPosition, args)

    def setPosition(self, *args):
        return self._obj.invoke("setPosition", _0_ssr.ALMotion._d_setPosition, args)

    def setTransform(self, *args):
        return self._obj.invoke("setTransform", _0_ssr.ALMotion._d_setTransform, args)

    def getTransform(self, *args):
        return self._obj.invoke("getTransform", _0_ssr.ALMotion._d_getTransform, args)

omniORB.registerObjref(ALMotion._NP_RepositoryId, _objref_ALMotion)
_0_ssr._objref_ALMotion = _objref_ALMotion
del ALMotion, _objref_ALMotion

# ALMotion skeleton
__name__ = "ssr__POA"
class ALMotion (PortableServer.Servant):
    _NP_RepositoryId = _0_ssr.ALMotion._NP_RepositoryId


    _omni_op_d = {"setAngles": _0_ssr.ALMotion._d_setAngles, "getAngles": _0_ssr.ALMotion._d_getAngles, "openHand": _0_ssr.ALMotion._d_openHand, "closeHand": _0_ssr.ALMotion._d_closeHand, "setStiffness": _0_ssr.ALMotion._d_setStiffness, "getStiffness": _0_ssr.ALMotion._d_getStiffness, "rest": _0_ssr.ALMotion._d_rest, "wakeUp": _0_ssr.ALMotion._d_wakeUp, "moveTo": _0_ssr.ALMotion._d_moveTo, "moveToward": _0_ssr.ALMotion._d_moveToward, "getRobotPosition": _0_ssr.ALMotion._d_getRobotPosition, "getRobotVelocity": _0_ssr.ALMotion._d_getRobotVelocity, "stopMove": _0_ssr.ALMotion._d_stopMove, "moveIsActive": _0_ssr.ALMotion._d_moveIsActive, "waitUntilMoveIsFinished": _0_ssr.ALMotion._d_waitUntilMoveIsFinished, "moveInit": _0_ssr.ALMotion._d_moveInit, "setWalkArmEnabled": _0_ssr.ALMotion._d_setWalkArmEnabled, "getWalkArmEnabled": _0_ssr.ALMotion._d_getWalkArmEnabled, "getPosition": _0_ssr.ALMotion._d_getPosition, "setPosition": _0_ssr.ALMotion._d_setPosition, "setTransform": _0_ssr.ALMotion._d_setTransform, "getTransform": _0_ssr.ALMotion._d_getTransform}

ALMotion._omni_skeleton = ALMotion
_0_ssr__POA.ALMotion = ALMotion
omniORB.registerSkeleton(ALMotion._NP_RepositoryId, ALMotion)
del ALMotion
__name__ = "ssr"

# interface ALTextToSpeech
_0_ssr._d_ALTextToSpeech = (omniORB.tcInternal.tv_objref, "IDL:ssr/ALTextToSpeech:1.0", "ALTextToSpeech")
omniORB.typeMapping["IDL:ssr/ALTextToSpeech:1.0"] = _0_ssr._d_ALTextToSpeech
_0_ssr.ALTextToSpeech = omniORB.newEmptyClass()
class ALTextToSpeech :
    _NP_RepositoryId = _0_ssr._d_ALTextToSpeech[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ssr.ALTextToSpeech = ALTextToSpeech
_0_ssr._tc_ALTextToSpeech = omniORB.tcInternal.createTypeCode(_0_ssr._d_ALTextToSpeech)
omniORB.registerType(ALTextToSpeech._NP_RepositoryId, _0_ssr._d_ALTextToSpeech, _0_ssr._tc_ALTextToSpeech)

# ALTextToSpeech operations and attributes
ALTextToSpeech._d_say = (((omniORB.tcInternal.tv_string,0), ), (), None)
ALTextToSpeech._d_setVolume = ((omniORB.tcInternal.tv_float, ), (), None)
ALTextToSpeech._d_getVolume = ((), (omniORB.tcInternal.tv_float, ), None)
ALTextToSpeech._d_setLanguage = (((omniORB.tcInternal.tv_string,0), ), (), None)
ALTextToSpeech._d_getLanguage = ((), ((omniORB.tcInternal.tv_string,0), ), None)
ALTextToSpeech._d_getAvailableLanguages = ((), (omniORB.typeMapping["IDL:ssr/StringArray:1.0"], ), None)

# ALTextToSpeech object reference
class _objref_ALTextToSpeech (CORBA.Object):
    _NP_RepositoryId = ALTextToSpeech._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def say(self, *args):
        return self._obj.invoke("say", _0_ssr.ALTextToSpeech._d_say, args)

    def setVolume(self, *args):
        return self._obj.invoke("setVolume", _0_ssr.ALTextToSpeech._d_setVolume, args)

    def getVolume(self, *args):
        return self._obj.invoke("getVolume", _0_ssr.ALTextToSpeech._d_getVolume, args)

    def setLanguage(self, *args):
        return self._obj.invoke("setLanguage", _0_ssr.ALTextToSpeech._d_setLanguage, args)

    def getLanguage(self, *args):
        return self._obj.invoke("getLanguage", _0_ssr.ALTextToSpeech._d_getLanguage, args)

    def getAvailableLanguages(self, *args):
        return self._obj.invoke("getAvailableLanguages", _0_ssr.ALTextToSpeech._d_getAvailableLanguages, args)

omniORB.registerObjref(ALTextToSpeech._NP_RepositoryId, _objref_ALTextToSpeech)
_0_ssr._objref_ALTextToSpeech = _objref_ALTextToSpeech
del ALTextToSpeech, _objref_ALTextToSpeech

# ALTextToSpeech skeleton
__name__ = "ssr__POA"
class ALTextToSpeech (PortableServer.Servant):
    _NP_RepositoryId = _0_ssr.ALTextToSpeech._NP_RepositoryId


    _omni_op_d = {"say": _0_ssr.ALTextToSpeech._d_say, "setVolume": _0_ssr.ALTextToSpeech._d_setVolume, "getVolume": _0_ssr.ALTextToSpeech._d_getVolume, "setLanguage": _0_ssr.ALTextToSpeech._d_setLanguage, "getLanguage": _0_ssr.ALTextToSpeech._d_getLanguage, "getAvailableLanguages": _0_ssr.ALTextToSpeech._d_getAvailableLanguages}

ALTextToSpeech._omni_skeleton = ALTextToSpeech
_0_ssr__POA.ALTextToSpeech = ALTextToSpeech
omniORB.registerSkeleton(ALTextToSpeech._NP_RepositoryId, ALTextToSpeech)
del ALTextToSpeech
__name__ = "ssr"

# interface ALBehaviorManager
_0_ssr._d_ALBehaviorManager = (omniORB.tcInternal.tv_objref, "IDL:ssr/ALBehaviorManager:1.0", "ALBehaviorManager")
omniORB.typeMapping["IDL:ssr/ALBehaviorManager:1.0"] = _0_ssr._d_ALBehaviorManager
_0_ssr.ALBehaviorManager = omniORB.newEmptyClass()
class ALBehaviorManager :
    _NP_RepositoryId = _0_ssr._d_ALBehaviorManager[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ssr.ALBehaviorManager = ALBehaviorManager
_0_ssr._tc_ALBehaviorManager = omniORB.tcInternal.createTypeCode(_0_ssr._d_ALBehaviorManager)
omniORB.registerType(ALBehaviorManager._NP_RepositoryId, _0_ssr._d_ALBehaviorManager, _0_ssr._tc_ALBehaviorManager)

# ALBehaviorManager operations and attributes
ALBehaviorManager._d_getInstalledBehaviors = ((), (omniORB.typeMapping["IDL:ssr/StringArray:1.0"], ), None)
ALBehaviorManager._d_getRunningBehaviors = ((), (omniORB.typeMapping["IDL:ssr/StringArray:1.0"], ), None)
ALBehaviorManager._d_isBehaviorInstalled = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
ALBehaviorManager._d_isBehaviorRunning = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_boolean, ), None)
ALBehaviorManager._d_runBehavior = (((omniORB.tcInternal.tv_string,0), ), (), None)
ALBehaviorManager._d_stopAllBehaviors = ((), (), None)
ALBehaviorManager._d_stopBehavior = (((omniORB.tcInternal.tv_string,0), ), (), None)

# ALBehaviorManager object reference
class _objref_ALBehaviorManager (CORBA.Object):
    _NP_RepositoryId = ALBehaviorManager._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def getInstalledBehaviors(self, *args):
        return self._obj.invoke("getInstalledBehaviors", _0_ssr.ALBehaviorManager._d_getInstalledBehaviors, args)

    def getRunningBehaviors(self, *args):
        return self._obj.invoke("getRunningBehaviors", _0_ssr.ALBehaviorManager._d_getRunningBehaviors, args)

    def isBehaviorInstalled(self, *args):
        return self._obj.invoke("isBehaviorInstalled", _0_ssr.ALBehaviorManager._d_isBehaviorInstalled, args)

    def isBehaviorRunning(self, *args):
        return self._obj.invoke("isBehaviorRunning", _0_ssr.ALBehaviorManager._d_isBehaviorRunning, args)

    def runBehavior(self, *args):
        return self._obj.invoke("runBehavior", _0_ssr.ALBehaviorManager._d_runBehavior, args)

    def stopAllBehaviors(self, *args):
        return self._obj.invoke("stopAllBehaviors", _0_ssr.ALBehaviorManager._d_stopAllBehaviors, args)

    def stopBehavior(self, *args):
        return self._obj.invoke("stopBehavior", _0_ssr.ALBehaviorManager._d_stopBehavior, args)

omniORB.registerObjref(ALBehaviorManager._NP_RepositoryId, _objref_ALBehaviorManager)
_0_ssr._objref_ALBehaviorManager = _objref_ALBehaviorManager
del ALBehaviorManager, _objref_ALBehaviorManager

# ALBehaviorManager skeleton
__name__ = "ssr__POA"
class ALBehaviorManager (PortableServer.Servant):
    _NP_RepositoryId = _0_ssr.ALBehaviorManager._NP_RepositoryId


    _omni_op_d = {"getInstalledBehaviors": _0_ssr.ALBehaviorManager._d_getInstalledBehaviors, "getRunningBehaviors": _0_ssr.ALBehaviorManager._d_getRunningBehaviors, "isBehaviorInstalled": _0_ssr.ALBehaviorManager._d_isBehaviorInstalled, "isBehaviorRunning": _0_ssr.ALBehaviorManager._d_isBehaviorRunning, "runBehavior": _0_ssr.ALBehaviorManager._d_runBehavior, "stopAllBehaviors": _0_ssr.ALBehaviorManager._d_stopAllBehaviors, "stopBehavior": _0_ssr.ALBehaviorManager._d_stopBehavior}

ALBehaviorManager._omni_skeleton = ALBehaviorManager
_0_ssr__POA.ALBehaviorManager = ALBehaviorManager
omniORB.registerSkeleton(ALBehaviorManager._NP_RepositoryId, ALBehaviorManager)
del ALBehaviorManager
__name__ = "ssr"

# interface ALMemory
_0_ssr._d_ALMemory = (omniORB.tcInternal.tv_objref, "IDL:ssr/ALMemory:1.0", "ALMemory")
omniORB.typeMapping["IDL:ssr/ALMemory:1.0"] = _0_ssr._d_ALMemory
_0_ssr.ALMemory = omniORB.newEmptyClass()
class ALMemory :
    _NP_RepositoryId = _0_ssr._d_ALMemory[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ssr.ALMemory = ALMemory
_0_ssr._tc_ALMemory = omniORB.tcInternal.createTypeCode(_0_ssr._d_ALMemory)
omniORB.registerType(ALMemory._NP_RepositoryId, _0_ssr._d_ALMemory, _0_ssr._tc_ALMemory)

# ALMemory operations and attributes
ALMemory._d_insertLongData = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), (), None)
ALMemory._d_insertFloatData = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long), (), None)
ALMemory._d_insertStringData = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), None)
ALMemory._d_insertoLongArrayData = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:ssr/LongArray:1.0"]), (), None)
ALMemory._d_insertoFloatArrayData = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:ssr/FloatArray:1.0"]), (), None)
ALMemory._d_insertoStringArrayData = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:ssr/StringArray:1.0"]), (), None)
ALMemory._d_getLongData = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_long, ), None)
ALMemory._d_getFloatData = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_float, ), None)
ALMemory._d_getStringData = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
ALMemory._d_getLongArrayData = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:ssr/LongArray:1.0"], ), None)
ALMemory._d_getFloatArrayData = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:ssr/FloatArray:1.0"], ), None)
ALMemory._d_getStringArrayData = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:ssr/StringArray:1.0"], ), None)

# ALMemory object reference
class _objref_ALMemory (CORBA.Object):
    _NP_RepositoryId = ALMemory._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def insertLongData(self, *args):
        return self._obj.invoke("insertLongData", _0_ssr.ALMemory._d_insertLongData, args)

    def insertFloatData(self, *args):
        return self._obj.invoke("insertFloatData", _0_ssr.ALMemory._d_insertFloatData, args)

    def insertStringData(self, *args):
        return self._obj.invoke("insertStringData", _0_ssr.ALMemory._d_insertStringData, args)

    def insertoLongArrayData(self, *args):
        return self._obj.invoke("insertoLongArrayData", _0_ssr.ALMemory._d_insertoLongArrayData, args)

    def insertoFloatArrayData(self, *args):
        return self._obj.invoke("insertoFloatArrayData", _0_ssr.ALMemory._d_insertoFloatArrayData, args)

    def insertoStringArrayData(self, *args):
        return self._obj.invoke("insertoStringArrayData", _0_ssr.ALMemory._d_insertoStringArrayData, args)

    def getLongData(self, *args):
        return self._obj.invoke("getLongData", _0_ssr.ALMemory._d_getLongData, args)

    def getFloatData(self, *args):
        return self._obj.invoke("getFloatData", _0_ssr.ALMemory._d_getFloatData, args)

    def getStringData(self, *args):
        return self._obj.invoke("getStringData", _0_ssr.ALMemory._d_getStringData, args)

    def getLongArrayData(self, *args):
        return self._obj.invoke("getLongArrayData", _0_ssr.ALMemory._d_getLongArrayData, args)

    def getFloatArrayData(self, *args):
        return self._obj.invoke("getFloatArrayData", _0_ssr.ALMemory._d_getFloatArrayData, args)

    def getStringArrayData(self, *args):
        return self._obj.invoke("getStringArrayData", _0_ssr.ALMemory._d_getStringArrayData, args)

omniORB.registerObjref(ALMemory._NP_RepositoryId, _objref_ALMemory)
_0_ssr._objref_ALMemory = _objref_ALMemory
del ALMemory, _objref_ALMemory

# ALMemory skeleton
__name__ = "ssr__POA"
class ALMemory (PortableServer.Servant):
    _NP_RepositoryId = _0_ssr.ALMemory._NP_RepositoryId


    _omni_op_d = {"insertLongData": _0_ssr.ALMemory._d_insertLongData, "insertFloatData": _0_ssr.ALMemory._d_insertFloatData, "insertStringData": _0_ssr.ALMemory._d_insertStringData, "insertoLongArrayData": _0_ssr.ALMemory._d_insertoLongArrayData, "insertoFloatArrayData": _0_ssr.ALMemory._d_insertoFloatArrayData, "insertoStringArrayData": _0_ssr.ALMemory._d_insertoStringArrayData, "getLongData": _0_ssr.ALMemory._d_getLongData, "getFloatData": _0_ssr.ALMemory._d_getFloatData, "getStringData": _0_ssr.ALMemory._d_getStringData, "getLongArrayData": _0_ssr.ALMemory._d_getLongArrayData, "getFloatArrayData": _0_ssr.ALMemory._d_getFloatArrayData, "getStringArrayData": _0_ssr.ALMemory._d_getStringArrayData}

ALMemory._omni_skeleton = ALMemory
_0_ssr__POA.ALMemory = ALMemory
omniORB.registerSkeleton(ALMemory._NP_RepositoryId, ALMemory)
del ALMemory
__name__ = "ssr"

# interface ALVideoDevice
_0_ssr._d_ALVideoDevice = (omniORB.tcInternal.tv_objref, "IDL:ssr/ALVideoDevice:1.0", "ALVideoDevice")
omniORB.typeMapping["IDL:ssr/ALVideoDevice:1.0"] = _0_ssr._d_ALVideoDevice
_0_ssr.ALVideoDevice = omniORB.newEmptyClass()
class ALVideoDevice :
    _NP_RepositoryId = _0_ssr._d_ALVideoDevice[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ssr.ALVideoDevice = ALVideoDevice
_0_ssr._tc_ALVideoDevice = omniORB.tcInternal.createTypeCode(_0_ssr._d_ALVideoDevice)
omniORB.registerType(ALVideoDevice._NP_RepositoryId, _0_ssr._d_ALVideoDevice, _0_ssr._tc_ALVideoDevice)

# ALVideoDevice operations and attributes
ALVideoDevice._d_getCameraModel = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)
ALVideoDevice._d_getFrameRate = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)
ALVideoDevice._d_getResolution = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)
ALVideoDevice._d_getColorSpace = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)
ALVideoDevice._d_setCameraParameter = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_long), (omniORB.tcInternal.tv_boolean, ), None)
ALVideoDevice._d_getCameraParameter = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_long, ), None)
ALVideoDevice._d_setCameraParameterToDefault = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_boolean, ), None)

# ALVideoDevice object reference
class _objref_ALVideoDevice (CORBA.Object):
    _NP_RepositoryId = ALVideoDevice._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def getCameraModel(self, *args):
        return self._obj.invoke("getCameraModel", _0_ssr.ALVideoDevice._d_getCameraModel, args)

    def getFrameRate(self, *args):
        return self._obj.invoke("getFrameRate", _0_ssr.ALVideoDevice._d_getFrameRate, args)

    def getResolution(self, *args):
        return self._obj.invoke("getResolution", _0_ssr.ALVideoDevice._d_getResolution, args)

    def getColorSpace(self, *args):
        return self._obj.invoke("getColorSpace", _0_ssr.ALVideoDevice._d_getColorSpace, args)

    def setCameraParameter(self, *args):
        return self._obj.invoke("setCameraParameter", _0_ssr.ALVideoDevice._d_setCameraParameter, args)

    def getCameraParameter(self, *args):
        return self._obj.invoke("getCameraParameter", _0_ssr.ALVideoDevice._d_getCameraParameter, args)

    def setCameraParameterToDefault(self, *args):
        return self._obj.invoke("setCameraParameterToDefault", _0_ssr.ALVideoDevice._d_setCameraParameterToDefault, args)

omniORB.registerObjref(ALVideoDevice._NP_RepositoryId, _objref_ALVideoDevice)
_0_ssr._objref_ALVideoDevice = _objref_ALVideoDevice
del ALVideoDevice, _objref_ALVideoDevice

# ALVideoDevice skeleton
__name__ = "ssr__POA"
class ALVideoDevice (PortableServer.Servant):
    _NP_RepositoryId = _0_ssr.ALVideoDevice._NP_RepositoryId


    _omni_op_d = {"getCameraModel": _0_ssr.ALVideoDevice._d_getCameraModel, "getFrameRate": _0_ssr.ALVideoDevice._d_getFrameRate, "getResolution": _0_ssr.ALVideoDevice._d_getResolution, "getColorSpace": _0_ssr.ALVideoDevice._d_getColorSpace, "setCameraParameter": _0_ssr.ALVideoDevice._d_setCameraParameter, "getCameraParameter": _0_ssr.ALVideoDevice._d_getCameraParameter, "setCameraParameterToDefault": _0_ssr.ALVideoDevice._d_setCameraParameterToDefault}

ALVideoDevice._omni_skeleton = ALVideoDevice
_0_ssr__POA.ALVideoDevice = ALVideoDevice
omniORB.registerSkeleton(ALVideoDevice._NP_RepositoryId, ALVideoDevice)
del ALVideoDevice
__name__ = "ssr"

# interface ALLeds
_0_ssr._d_ALLeds = (omniORB.tcInternal.tv_objref, "IDL:ssr/ALLeds:1.0", "ALLeds")
omniORB.typeMapping["IDL:ssr/ALLeds:1.0"] = _0_ssr._d_ALLeds
_0_ssr.ALLeds = omniORB.newEmptyClass()
class ALLeds :
    _NP_RepositoryId = _0_ssr._d_ALLeds[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ssr.ALLeds = ALLeds
_0_ssr._tc_ALLeds = omniORB.tcInternal.createTypeCode(_0_ssr._d_ALLeds)
omniORB.registerType(ALLeds._NP_RepositoryId, _0_ssr._d_ALLeds, _0_ssr._tc_ALLeds)

# ALLeds operations and attributes
ALLeds._d_fade = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_float, omniORB.tcInternal.tv_float), (), None)
ALLeds._d_fadeRGB = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_float), (), None)

# ALLeds object reference
class _objref_ALLeds (CORBA.Object):
    _NP_RepositoryId = ALLeds._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def fade(self, *args):
        return self._obj.invoke("fade", _0_ssr.ALLeds._d_fade, args)

    def fadeRGB(self, *args):
        return self._obj.invoke("fadeRGB", _0_ssr.ALLeds._d_fadeRGB, args)

omniORB.registerObjref(ALLeds._NP_RepositoryId, _objref_ALLeds)
_0_ssr._objref_ALLeds = _objref_ALLeds
del ALLeds, _objref_ALLeds

# ALLeds skeleton
__name__ = "ssr__POA"
class ALLeds (PortableServer.Servant):
    _NP_RepositoryId = _0_ssr.ALLeds._NP_RepositoryId


    _omni_op_d = {"fade": _0_ssr.ALLeds._d_fade, "fadeRGB": _0_ssr.ALLeds._d_fadeRGB}

ALLeds._omni_skeleton = ALLeds
_0_ssr__POA.ALLeds = ALLeds
omniORB.registerSkeleton(ALLeds._NP_RepositoryId, ALLeds)
del ALLeds
__name__ = "ssr"

#
# End of module "ssr"
#
__name__ = "NAO_idl"

_exported_modules = ( "ssr", )

# The end.
